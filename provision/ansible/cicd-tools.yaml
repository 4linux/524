---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  vars:
    ssh_public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbC7fGQkGTjXERSAwLq7co5QXvahoXdG93m/Zx/+W1v+eme1ZohTCyi41MkcAJDr2KHSibwo6PE7WWjgYFAsZg/PNE6igI0D5VzC63T48tsK6ffxGFYy3rl0B/VyvHdfqe/vcw44zn6HRjF2q01DXV2NeSBZuJL+diclAcB+2jhrjha9iHWxxkJuxwFl76bAfhVdtNE6yC0It+aUtJLPT1ppcviGKpIyN1w6pGvWxk1pV+Pf6CdqU1FK05FeSPK+f34bSgIOin/DCNN6oBFgX2V5H/+Gf290bmlT9YGVSNZ0Y/HCK3Cetl3A+1j4YtbyANA3ju5mWeKeG8svzfphVRuOlKtwL+pVSrcnJuLIJqf4Nsq3PBAaPt9xzHk5vkmVfaMftQU0OXrgYhP2455SuuhpJe4LG3uyncRAXCK1AX7OoDI5jY6C4pZM00Vv+FOu5BYZLn28vr73B/rHBMzjnOCiouLbrYiCSL9VGtLcPTx4haoTWbm7fZSakyUhITI6M= alissonoliveira@ALISSON"

  tasks:
    - name: Garantindo /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
      with_items:
        - 192.168.88.10 cicd.4labs.example cicd
        - 192.168.88.20	cicd-tools.4labs.example cicd-tools 
        - 192.168.88.30 k3s.4labs.example k3s
        - 192.168.88.40 gitlab-ci.4labs.example gitlab-ci

    - name: Adiciona usuario suporte
      user:
        name: suporte
        shell: /bin/bash
        password : $1$QbUARykG$p2nthVG8AkDvabKPHwboa1

    - name: Criar usuário Devops
      user:
        name: "devops"
        shell: /bin/bash
        home: "/home/devops"
        state: present
        createhome: yes

    - name: Garantir que o usuário devops pode usar sudo sem senha
      lineinfile:
        path: /etc/sudoers
        line: 'devops ALL=(ALL) NOPASSWD:ALL'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Adicionar chave pública ao arquivo authorized_keys
      authorized_key:
        user: devops
        state: present
        key: "{{ ssh_public_key }}"

    - name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - snapd
        - git
        - vim
        - python3-docker

    - name: Faz o download do script para instalação do Docker
      get_url:
        url: https://get.docker.com/
        dest: /tmp/get_docker.sh
        mode: '0755'

    - name: Executa o script para instalação do Docker
      shell: "sh /tmp/get_docker.sh"
      

    - name: create .bash.rc
      copy:
        src: files/.bashrc
        dest: /root
        owner: root
        group: root
        mode: '0644'

    - name: set max_map_count
      sysctl:
        name: vm.max_map_count
        value: "524288"

    - name: set file-max
      sysctl:
        name:  fs.file-max
        value: "131072"

    - name: Criando o arquivo daemon.json
      copy:
        src: files/daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: '0644'

    - name: Reinicia o Docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: set swap_space variable
      set_fact:
        swap_space: 1G

    - name: set swap_file variable
      set_fact:
        swap_file: /{{ swap_space }}.swap

    - name: check if swap file exists
      stat:
        path: "{{ swap_file }}"
      register: swap_file_check

    - name: create swap file
      command: fallocate -l {{ swap_space }} {{ swap_file }}
      when: not swap_file_check.stat.exists

    - name: Create swap space
      command: dd if=/dev/zero of=/extraswap bs=1M count=1024
      when: not swap_file_check.stat.exists

    - name: set permissions on swap file
      file:
        path: "{{ swap_file }}"
        mode: 0600

    - name: format swap file
      command: mkswap {{ swap_file }}
      when: not swap_file_check.stat.exists

    - name: add to fstab
      lineinfile:
        dest: /etc/fstab
        regexp: "{{ swap_file }}"
        line: "{{ swap_file }} none swap sw 0 0"

    - name: turn on swap
      command: swapon -a

    - name: set swapiness
      sysctl:
        name: vm.swappiness
        value: "1"

    - name: Cria diretorio do nexus
      ansible.builtin.file:
        path: /nexus
        state: directory
        mode: '0755'

    - name: Permissao diretorio nexus
      ansible.builtin.file:
        path: /nexus
        state: directory
        recurse: yes
        owner: 200
        group: 200

    - name: Criando conatainer do Nexus
      docker_container:
        name: nexus
        state: started
        image: "sonatype/nexus3"
        pull: true
        ports:
          - "8081:8081"
          - "8082:8082"
          - "8083:8083"
        volumes:
        - /nexus:/nexus-data

    - name: Criando conatainer do sonarqube
      docker_container:
        name: sonarqube
        state: started
        image: "sonarqube:9.6.1-community"
        pull: true
        ports:
          - "9000:9000"
        volumes:
        - /sonarqube/sonarqube_conf:/opt/sonarqube/conf
        - /sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
        - /sonarqube/sonarqube_logs:/opt/sonarqube/logs
        - /sonarqube/sonarqube_data:/opt/sonarqube/data