---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Garantindo /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
      with_items:
        - 192.168.88.10 cicd.4labs.example cicd
        - 192.168.88.20	cicd-tools.4labs.example cicd-tools 
        - 192.168.88.30 k3s.4labs.example k3s
        - 192.168.88.40 gitlab-ci.4labs.example gitlab-ci

    - name: Adiciona usuario suporte
      user:
        name: suporte
        shell: /bin/bash
        password : $1$QbUARykG$p2nthVG8AkDvabKPHwboa1

    - name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - snapd
        - gitversion: "3"

networks:
  gitea:
    external: false

services:
  server:
    container_name: 'gitea-server'
    image: gitea/gitea:latest
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    networks:
      - gitea
    volumes:
      - ./gitea:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "222:22"
  jenkins-ci-server:
    user: root
    container_name: 'jenkins-ci-server'
    image: jenkins/jenkins:lts
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    links:
      - "server:gitea"
      - "k3s:k3s"
    networks:
      - gitea
    volumes:
      - ./jenkins_home:/var/jenkins_home
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /usr/bin/docker:/usr/bin/docker
    ports:
      - "8080:8080"
      - "50000:50000"
  k3s:
    image: "rancher/k3s:${K3S_VERSION:-latest}"
    command: server --disable=traefik
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: always
    networks:
      - gitea
    environment:
    - K3S_TOKEN=12345
    - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
    - K3S_KUBECONFIG_MODE=666
    volumes:
    - ./k3s-server:/var/lib/rancher/k3s
    # This is just so that we get the kubeconfig file out
    - .:/output
    - /var/run/docker.sock:/var/run/docker.sock:rw
    - /usr/bin/docker:/usr/bin/docker
    ports:
    - 6443:6443  # Kubernetes API Server
    - 80:80      # Ingress controller port 80
    - 443:443    # Ingress controller port 443

  agent:
    image: "rancher/k3s:${K3S_VERSION:-latest}"
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    networks:
      - gitea
    restart: always
    environment:
    - K3S_URL=https://k3s:6443
    - K3S_TOKEN=12345

      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Instala o Docker e suas dependencias
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: create .bash.rc
      copy:
        src: files/.bashrc
        dest: /root
        owner: root
        group: root
        mode: '0644'

    - name: set max_map_count
      sysctl:
        name: vm.max_map_count
        value: "524288"

    - name: set file-max
      sysctl:
        name:  fs.file-max
        value: "131072"

    - name: Criando o arquivo daemon.json
      copy:
        src: files/daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: '0644'

    - name: Reinicia o Docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: set swap_space variable
      set_fact:
        swap_space: 1G

    - name: set swap_file variable
      set_fact:
        swap_file: /{{ swap_space }}.swap

    - name: check if swap file exists
      stat:
        path: "{{ swap_file }}"
      register: swap_file_check

    - name: create swap file
      command: fallocate -l {{ swap_space }} {{ swap_file }}
      when: not swap_file_check.stat.exists

    - name: Create swap space
      command: dd if=/dev/zero of=/extraswap bs=1M count=1024
      when: not swap_file_check.stat.exists

    - name: set permissions on swap file
      file:
        path: "{{ swap_file }}"
        mode: 0600

    - name: format swap file
      command: mkswap {{ swap_file }}
      when: not swap_file_check.stat.exists

    - name: add to fstab
      lineinfile:
        dest: /etc/fstab
        regexp: "{{ swap_file }}"
        line: "{{ swap_file }} none swap sw 0 0"

    - name: turn on swap
      command: swapon -a

    - name: set swapiness
      sysctl:
        name: vm.swappiness
        value: "1"

    - name: Cria diretorio do nexus
      ansible.builtin.file:
        path: /nexus
        state: directory
        mode: '0755'

    - name: Permissao diretorio nexus
      ansible.builtin.file:
        path: /nexus
        state: directory
        recurse: yes
        owner: 200
        group: 200

    - name: Criando conatainer do Nexus
      docker_container:
        name: nexus
        state: started
        image: "sonatype/nexus3"
        pull: true
        ports:
          - "8081:8081"
          - "8082:8082"
          - "8083:8083"
        volumes:
        - /nexus:/nexus-data

    - name: Criando conatainer do sonarqube
      docker_container:
        name: sonarqube
        state: started
        image: "sonarqube:9.6.1-community"
        pull: true
        ports:
          - "9000:9000"
        volumes:
        - /sonarqube/sonarqube_conf:/opt/sonarqube/conf
        - /sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
        - /sonarqube/sonarqube_logs:/opt/sonarqube/logs
        - /sonarqube/sonarqube_data:/opt/sonarqube/data