---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  vars:
    ssh_public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbC7fGQkGTjXERSAwLq7co5QXvahoXdG93m/Zx/+W1v+eme1ZohTCyi41MkcAJDr2KHSibwo6PE7WWjgYFAsZg/PNE6igI0D5VzC63T48tsK6ffxGFYy3rl0B/VyvHdfqe/vcw44zn6HRjF2q01DXV2NeSBZuJL+diclAcB+2jhrjha9iHWxxkJuxwFl76bAfhVdtNE6yC0It+aUtJLPT1ppcviGKpIyN1w6pGvWxk1pV+Pf6CdqU1FK05FeSPK+f34bSgIOin/DCNN6oBFgX2V5H/+Gf290bmlT9YGVSNZ0Y/HCK3Cetl3A+1j4YtbyANA3ju5mWeKeG8svzfphVRuOlKtwL+pVSrcnJuLIJqf4Nsq3PBAaPt9xzHk5vkmVfaMftQU0OXrgYhP2455SuuhpJe4LG3uyncRAXCK1AX7OoDI5jY6C4pZM00Vv+FOu5BYZLn28vr73B/rHBMzjnOCiouLbrYiCSL9VGtLcPTx4haoTWbm7fZSakyUhITI6M= alissonoliveira@ALISSON"

  tasks:
    - name: Garantindo /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
      with_items:
        - 192.168.88.10 cicd.4labs.example cicd
        - 192.168.88.20	cicd-tools.4labs.example cicd-tools 
        - 192.168.88.30 k3s.4labs.example k3s
        - 192.168.88.40 gitlab-ci.4labs.example gitlab-ci
        
    - name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - snapd
        - python3
        - git
        - vim
        - python3-docker

    - name: Criar usuário Devops
      user:
        name: "devops"
        shell: /bin/bash
        home: "/home/devops"
        state: present
        createhome: yes

    - name: Garantir que o usuário devops pode usar sudo sem senha
      lineinfile:
        path: /etc/sudoers
        line: 'devops ALL=(ALL) NOPASSWD:ALL'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Adicionar chave pública ao arquivo authorized_keys
      authorized_key:
        user: devops
        state: present
        key: "{{ ssh_public_key }}"


    - name: Faz o download do script para instalação do Docker
      get_url:
        url: https://get.docker.com/
        dest: /tmp/get_docker.sh
        mode: '0755'

    - name: Executa o script para instalação do Docker
      shell: "sh /tmp/get_docker.sh"

    - name: Criando o arquivo daemon.json
      copy:
        src: files/daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: '0644'

    - name: Reinicia o Docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: Criando o arquivo k3s.sh
      copy:
        src: files/k3s.sh
        dest: /root/
        owner: root
        group: root
        mode: '777'

    - name: Instalando k3s via script 
      command: sh /root/k3s.sh

    - name: Configurando add-on de rede 
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/master/manifests/calico-typha.yaml

    - name: Criando o arquivo k3s.sh
      copy:
        src: files/jenkins-k8s.yaml
        dest: /root/
        owner: root
        group: root
        mode: '644'

    - name: Criando a conta de servico para o Jenkins
      command: kubectl apply -f /root/jenkins-k8s.yaml

    - name: Extraindo o token criado para o Jenkins
      shell: kubectl get secret jenkins-sa-token -o jsonpath={.data.token} -n jenkins-runner
      register: token

    - copy:
        content: '{{ token.stdout | b64decode }}'
        dest: "/root/jenkins-token.txt"

    - name: Criando o arquivo registries.yaml
      copy:
        src: files/registries.yaml
        dest: /etc/rancher/k3s/
        owner: root
        group: root
        mode: '644'

    - name: Restart k3s
      command: systemctl restart k3s

    - name: Cria ingress nginx
      command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.2/deploy/static/provider/cloud/deploy.yaml

    - name: Copia Config Nginx
      copy:
        src: files/ingress-nginx.yaml
        dest: /root/
        owner: root
        group: root
        mode: '644'

    - name: Criando SVC nginx
      command: kubectl apply -f /root/ingress-nginx.yaml

    - name: Cria diretorio do homolog
      ansible.builtin.file:
        path: /root/homolog
        state: directory
        mode: '0755'

    - name: Copia Config Homolog
      copy:
        src: manifestos/homolog
        dest: /root/
        owner: root
        group: root
        mode: '644'